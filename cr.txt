from flask import Flask, render_template, request, redirect, url_for
from flask_migrate import Migrate
from models import db

app = Flask(__name__)

app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://teste:teste@localhost/music'

db.init_app(app)
migrate = Migrate(app, db)

@app.route('/')
def index():
    return "hello world!"

#   Comandos terminal
# flask db init
# flask db migrate -m "create table Musica"
# flask db upgrade

#==================================================================================================================

#Controller musica.py

from flask import Blueprint, request, jsonify, render_template, redirect, url_for
from models import db, Musica
from flask import flash

musica_bp = Blueprint('musica_bp', __name__)

# Renderizar o formulário de cadastro de música
@musica_bp.route('/musicas/cadastrar', methods=['GET'])
def form_cadastro_musica():
    return render_template('cadastro_musica.html')

@musica_bp.route('/musicas', methods=['POST'])
def create_musica():
    titulo = request.form['titulo']
    artista = request.form['artista']
    video = request.form['video']
    link = request.form['link']
    genero = request.form.get('genero', None)

    musica = Musica(titulo=titulo, artista=artista, video=video, link=link, genero=genero)

    db.session.add(musica)
    db.session.commit()
    return render_template('cadastro.html')

# Obter todas as músicas
@musica_bp.route('/musicas', methods=['GET'])
def get_musicas():
    musicas = Musica.query.all()
    return render_template('index.html', musicas=musicas)

# Obter uma música específica por ID
@musica_bp.route('/musicas/<int:musica_id>', methods=['GET'])
def get_musica(musica_id):
    musica = Musica.query.get(musica_id)

    if not musica:
        return jsonify({'message': 'Musica não encontrada'}), 404

    return jsonify(musica.__dict__)

# Atualizar uma música específica por ID
@musica_bp.route('/musicas/<int:musica_id>', methods=['PUT'])
def update_musica(musica_id):
    musica = Musica.query.get(musica_id)

    if not musica:
        return jsonify({'message': 'Musica não encontrada'}), 404

    musica.titulo = request.json['titulo']
    musica.artista = request.json['artista']
    musica.video = request.json['video']
    musica.link = request.json['link']
    musica.genero = request.json['genero']

    db.session.commit()

    return jsonify({'message': 'Musica atualizada com sucesso!'})

# Deletar uma música específica por ID
@musica_bp.route('/musicas/<int:musica_id>', methods=['DELETE'])
def delete_musica(musica_id):
    musica = Musica.query.get(musica_id)

    if not musica:
        return jsonify({'message': 'Musica não encontrada'}), 404

    db.session.delete(musica)
    db.session.commit()

    return jsonify({'message': 'Musica deletada com sucesso!'})